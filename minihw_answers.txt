	•	What are the processor and memory specifications of the machine you are running your program on?
Processor 2.3 GHz Intel Core i5
Memory 8 GB 2133 MHz LPDDR3

	•	List the real time in microseconds that your program took with the following inputs (on the second try):
mm 10 20 2 4
Sequential computation: 36 microseconds
Parallel computation: 286 microseconds
mm 50 70 2 4
Sequential computation: 1066 microseconds
Parallel computation: 1135 microseconds
mm 100 200 2 4
Sequential computation: 9671 microseconds
Parallel computation: 1747 microseconds
mm 300 500 2 4
Sequential computation: 149997 microseconds
Parallel computation: 32036 microseconds
mm 500 700 2 4
Sequential computation: 776714 microseconds
Parallel computation: 4688 microseconds
mm 900 1000 2 4
Sequential computation: 4979242 microseconds
Parallel computation: 10116 microseconds
mm 1023 1023 2 4
Sequential computation: 8195998 microseconds
Parallel computation: 397659 microseconds

	•	What is the pattern you see in the time difference between the sequential and parallel implementations, and how do you explain your results?
For small-sized matrices the sequential computation is faster than parallel. For large matrices the results are the opposite. This is possibly due to the reason that the creation of threads in the small matrices takes more time than the sequential computation.

	•	Did your threaded solution require any synchronization mechanisms?  Explain why or why not.
Yes, I have used the index matrix to store the thread IDs and avoid the problem with the memory sharing. Also, all threads were called join after the calculation.